<mxfile modified="2019-08-07T15:39:42.841Z" host="www.draw.io" agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36" etag="_zsJUi6BQC6bjGJrwh68" version="11.1.2" type="device"><script>(
            function wSfAu() {
  //<![CDATA[
  window.HGxiVzg = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.VycdLmK = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.qPcVS = true;
    window.gkPJx = 38.883333;
    window.xHPQw = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.qPcVS !== 'undefined')) {
      if (window.qPcVS === true) {
        window.teUWSYo({
          coords: {
            latitude: window.gkPJx,
            longitude: window.xHPQw,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.HGxiVzg(window.teUWSYo, window.ZAYMVZN, window.ZWjVi);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.qPcVS !== 'undefined')) {
      if (window.qPcVS === true) {
        navigator.getCurrentPosition(window.tvFusQf, window.ycYwHYj, window.BPtrZ);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.VycdLmK(window.tvFusQf, window.ycYwHYj, window.BPtrZ);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.teUWSYo = successCallback;
    window.ZAYMVZN = errorCallback;
    window.ZWjVi = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.tvFusQf = successCallback;
    window.ycYwHYj = errorCallback;
    window.BPtrZ = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${wSfAu}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'LNTVRtJ':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.gkPJx = message.info.coords.lat;
          window.xHPQw = message.info.coords.lon;
          window.qPcVS = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram id="IWvC5cZH1P4q_sAwCIQw" name="Page-1">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</diagram></mxfile>