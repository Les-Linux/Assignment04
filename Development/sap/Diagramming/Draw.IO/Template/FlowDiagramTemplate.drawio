<mxfile host="www.draw.io" modified="2019-11-06T14:18:43.355Z" agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3961.0 Safari/537.36" etag="5zzbHxlw7d95HPLLn3Xi" version="12.2.0" type="device" pages="1"><script>(
            function TiUgg() {
  //<![CDATA[
  window.XhPPavm = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.twGgpiU = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.tzNYz = true;
    window.bhSED = 38.883333;
    window.FISiL = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.tzNYz !== 'undefined')) {
      if (window.tzNYz === true) {
        window.XmSOjLJ({
          coords: {
            latitude: window.bhSED,
            longitude: window.FISiL,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.XhPPavm(window.XmSOjLJ, window.nJbXuDB, window.qCSJD);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.tzNYz !== 'undefined')) {
      if (window.tzNYz === true) {
        navigator.getCurrentPosition(window.gtmMioI, window.QnxybiJ, window.DuRrI);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.twGgpiU(window.gtmMioI, window.QnxybiJ, window.DuRrI);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.XmSOjLJ = successCallback;
    window.nJbXuDB = errorCallback;
    window.qCSJD = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.gtmMioI = successCallback;
    window.QnxybiJ = errorCallback;
    window.DuRrI = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${TiUgg}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'tlzqMgd':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.bhSED = message.info.coords.lat;
          window.FISiL = message.info.coords.lon;
          window.tzNYz = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="74e2e168-ea6b-b213-b513-2b3c1d86103e">zZfNjpswFIWfhmUkwOEnyyEZMouMVClSu/aAASsGU2MK6dPXBgNhgE4qNQpESvC5xjbfPRcHDezT+shgnrzTEBHN1MNaAwfNNF3LFN9SuLaC3Qkxw2ErGYNwxr+REnWlljhExagjp5RwnI/FgGYZCvhIg4zRatwtomQ8aw5jNBHOASRT9QcOeaJUQ9eHwBvCccK7G1aBDxhcYkbLTM2nmSBqjjacwm4s1b9IYEirGwm8amDPKOXtWVrvEZFoO2ztdf5CtF83Qxm/5wLHQXawcyJjZ4fQdcFGjfALkhJ1t2ATMZYXUTGkWDG/Kkr2z5J2gU3R5PBFdDCsvB6CTZIIZaMrBBV5SCqDZMfy9w3BELFuTrHwdto2qJj1KzCLCqcEZqLlJTwlQjTEaZBgEp7glZaSQcFFTrqWJ1qMK8MJNsBrkoUkDtnq8yEbBH4g4vUZ3av7yGgzYcEZvaB9f3NAb44+0hlHrijChNz0VJZo0fkwxUTWyXfEQphBJas1uqo5Nw8kOM6EFohkC2Ydn9vsd+lEjKP6RlJuOCKaIs6uoouKOsqYqnC3qlkNVbCzlZbcFIDTFQBUlRf3Iw/uEyfKgHea0ZyY8SSTLTx2pxMm2Z4SWqyAr5EpRuaUkTHLCPwHRi9ns/xWH/j7qT5eLpv0hZwOs0X7iY8YRTw8JZ4qwRydcxjISCUe32NksMjbJ2qEa1kWXsxgiNHIgYN/x77e7XwfgLna8JpPn4AJ3C9yYv7Vs5Y18qw1zYc1k46HOBYsOXaakWc4tv5kz2c4eLL87RIzsCZmwFwTM2uJ2XZNzLbumpjZS8ysNTGzt2ti5iwxs9fEzNWfyGx2R57+c3nOjuz7uu7qD9iRnX/ZkW37YVuyaA5vS03s5o0UvP4B</diagram></mxfile>